#version 300 es 
precision highp float;

in vec4 v_texcoord;
in vec4 v_color;
in vec4 v_clipspacePosition;
in vec4 v_vetexToCameraVector;

out vec4 color;

uniform float u_frames;
uniform float u_near;
uniform float u_far;
uniform sampler2D u_depthTexture;
uniform sampler2D u_reflectTexture;
uniform sampler2D u_refractTexture;
uniform sampler2D u_distortionTexture;
uniform sampler2D u_normalTexture;

const float WAVE_STRENGTH = 0.02f;
const float DISTORT_FACTOR = 0.1f;
const float shineDamper = 50.0f;
const float reflectivity = 1.5f;

void main() {
    vec3 lightDirection = vec3(0.0f, 0.0f, 1.0f);
    vec4 ndc = (v_clipspacePosition / v_clipspacePosition.w) / 2.0f + 0.5f;
    vec2 refractTexcoord = vec2(ndc.x, ndc.y);
    vec2 reflectTexcoord = vec2(ndc.x, 1.0f - ndc.y);
    float depth = texture(u_depthTexture, vec2(refractTexcoord.x, refractTexcoord.y)).r;
    float floorDistance = 2.0f * u_near * u_far / (u_far + u_near - (2.0f * depth - 1.0f) * (u_far - u_near));
    float waterDistance = 2.0f * u_near * u_far / (u_far + u_near - (2.0f * gl_FragCoord.z - 1.0f) * (u_far - u_near));
    float waterDepth = floorDistance - waterDistance;
    float waterDepthFactor = clamp(pow(waterDepth, 2.0f), 0.0f, 1.0f);
    vec2 distortedTexCoords = texture(u_distortionTexture, vec2(v_texcoord.x + u_frames, v_texcoord.y)).rg * DISTORT_FACTOR;
    distortedTexCoords = vec2(v_texcoord.xy) + vec2(distortedTexCoords.x, distortedTexCoords.y + u_frames);
    vec2 totalDistortion = (texture(u_distortionTexture, distortedTexCoords).rg * 2.0f - 1.0f) * WAVE_STRENGTH * waterDepthFactor;
    refractTexcoord += totalDistortion;
    reflectTexcoord += totalDistortion;
    vec4 refractColor = texture(u_refractTexture, refractTexcoord);
    vec4 reflectColor = texture(u_reflectTexture, reflectTexcoord);
    vec4 normalColor = texture(u_normalTexture, distortedTexCoords);
    vec3 normal = vec3(normalColor.r * 2.0f - 1.0f, normalColor.b, normalColor.g * 2.0f - 1.0f);
    normal = normalize(normal);
    vec3 reflectedLightDirection = reflect(lightDirection, normal);
    vec3 viewVector = vec3(normalize(v_vetexToCameraVector));
    float specularFactor = max(dot(reflectedLightDirection, viewVector), 0.0f);
    specularFactor = pow(specularFactor, shineDamper);
    vec3 specularColor = vec3(1.0f, 1.0f, 1.0f) * specularFactor * reflectivity * waterDepthFactor;
    float refractFactor = (dot(viewVector, normal), 0.0f, 1.0f);
    refractFactor = pow(refractFactor, 0.5f);
    color = mix(reflectColor, refractColor, refractFactor) * v_color + vec4(specularColor, 1.0f);
    color.a = waterDepthFactor;

}