#version 300 es 
layout(location = 0) in vec2 a_position;
layout(location = 1) in vec4 a_indicator;

const float PI = 3.1415926535897932384626433832795f;

const float waveLength = 0.020f;
const float waveAmplitude = 0.002f;
const float specularReflectivity = 0.4f;
const float shineDamper = 20.0f;

uniform mat4 u_model;
uniform vec3 u_eye;
uniform float u_time;

uniform mat4 u_viewInverse;
uniform mat4 u_projection;

out vec4 v_clipSpaceGrid;
out vec4 v_clipSpaceReal;
out vec3 v_normal;
out vec3 v_toCameraVector;
out vec3 v_specular;
out vec3 v_diffuse;

/*uniform*/ const vec3 lightDirection = vec3(0.0f, -1.0f, -1.0f);
/*uniform*/ const vec3 lightColour = vec3(1.0f);
/*uniform*/ const vec2 lightBias = vec2(0.4f);

vec3 calcSpecularLighting(vec3 toCamVector, vec3 toLightVector, vec3 normal) {
    vec3 reflectedLightDirection = reflect(-toLightVector, normal);
    float specularFactor = dot(reflectedLightDirection, toCamVector);
    specularFactor = max(specularFactor, 0.0f);
    specularFactor = pow(specularFactor, shineDamper);
    return specularFactor * specularReflectivity * lightColour;
}

vec3 calculateDiffuseLighting(vec3 toLightVector, vec3 normal) {
    float brightness = max(dot(toLightVector, normal), 0.0f);
    return (lightColour * lightBias.x) + (brightness * lightColour * lightBias.y);
}

vec3 calcNormal(vec3 vertex0, vec3 vertex1, vec3 vertex2) {
    vec3 tangent = vertex1 - vertex0;
    vec3 bitangent = vertex2 - vertex0;
    return normalize(cross(tangent, bitangent));
}

float generateOffset(float x, float z, float val1, float val2) {
    float radiansX = ((mod(x + z * x * val1, waveLength) / waveLength) + u_time * mod(x * 0.8f + z, 1.5f)) * 2.0f * PI;
    float radiansZ = ((mod(val2 * (z * x + x * z), waveLength) / waveLength) + u_time * 2.0f * mod(x, 2.0f)) * 2.0f * PI;
    return waveAmplitude * 0.5f * (sin(radiansZ) + cos(radiansX));
}

vec3 applyDistortion(vec3 vertex) {
    float xDistortion = generateOffset(vertex.x, vertex.z, 0.2f, 0.1f);
    float yDistortion = generateOffset(vertex.x, vertex.z, 0.1f, 0.3f);
    float zDistortion = generateOffset(vertex.x, vertex.z, 0.15f, 0.2f);
    return vertex + vec3(xDistortion, yDistortion, zDistortion);
}

void main() {
	//get the grid position of all 3 vertices in the triangle
    vec3 currentVertex = (vec4(a_position.x, 0.0f, a_position.y, 1.0f)).xyz;
    vec3 vertex1 = currentVertex + vec3(a_indicator.x, 0.0f, a_indicator.y);
    vec3 vertex2 = currentVertex + vec3(a_indicator.z, 0.0f, a_indicator.w);

    v_clipSpaceGrid = u_projection * u_viewInverse * u_model * vec4(currentVertex, 1.0f);

	//apply distortion to all 3 vertices
    currentVertex = applyDistortion(currentVertex);
    vertex1 = applyDistortion(vertex1);
    vertex2 = applyDistortion(vertex2);

    v_normal = calcNormal(currentVertex, vertex1, vertex2);

    v_clipSpaceReal = u_projection * u_viewInverse * u_model * vec4(currentVertex, 1.0f);
    gl_Position = v_clipSpaceReal;

    v_toCameraVector = normalize(u_eye - currentVertex);

	//calculate lighting
    vec3 toLightVector = -normalize(lightDirection);
    v_specular = calcSpecularLighting(v_toCameraVector, toLightVector, v_normal);
    v_diffuse = calculateDiffuseLighting(toLightVector, v_normal);

}