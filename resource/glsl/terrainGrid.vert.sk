#version 300 es 

layout(location = 0) in vec2 a_position;
layout(location = 1) in vec4 a_indicator;
uniform mat4 u_model;
uniform mat4 u_projection;
uniform mat4 u_viewInverse;
uniform sampler2D u_textureDepth;

out vec2 v_texcoord;
out vec4 v_modelPosition;

out vec3 v_normal;

vec3 calcNormal(vec3 vertex0, vec3 vertex1, vec3 vertex2) {
    vec3 tangent = vertex1 - vertex0;
    vec3 bitangent = vertex2 - vertex0;
    return normalize(cross(tangent, bitangent));
}
void main() {

    v_texcoord = a_position;
	//get the grid position of all 3 vertices in the triangle
    vec3 currentVertex = vec3(a_position.x, 0.0f, a_position.y);
    vec3 vertex1 = currentVertex + vec3(a_indicator.x, 0.0f, a_indicator.y);
    vec3 vertex2 = currentVertex + vec3(a_indicator.z, 0.0f, a_indicator.w);
    vec2 texcoord1 = a_position + vec2(a_indicator.x, a_indicator.y);
    vec2 texcoord2 = a_position + vec2(a_indicator.z, a_indicator.w);
    v_texcoord = clamp(v_texcoord * 0.5f + 0.5f, 0.01f, 0.99f);
    texcoord1 = clamp(texcoord1 * 0.5f + 0.5f, 0.01f, 0.99f);
    texcoord2 = clamp(texcoord2 * 0.5f + 0.5f, 0.01f, 0.99f);
    currentVertex.y = texture(u_textureDepth, v_texcoord).r * 2.0f - 1.0f;
    vertex1.y = texture(u_textureDepth, texcoord1).r * 2.0f - 1.0f;
    vertex2.y = texture(u_textureDepth, texcoord2).r * 2.0f - 1.0f;
    v_normal = calcNormal(currentVertex, vertex1, vertex2);
    gl_Position = u_projection * u_viewInverse * u_model * vec4(currentVertex, 1.0f);
    v_modelPosition = u_model * vec4(currentVertex, 1.0f);
}